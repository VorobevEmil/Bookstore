@using Bookstore.Shared
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

@if (FileDataValue != null)
{
    <MudImage Src="@($"data:image/png;base64, {FileDataValue}")" Alt="@TitleImage" Fluid="true" Width="140" Elevation="25" Class="rounded-lg ma-4" />
}

<InputFile id="fileInput" accept="image/*" OnChange="UploadFile" hidden />
<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           Class="mt-5"
           for="fileInput">
    Загрузить фото
</MudButton>

@code {
    [Parameter]
    public string TitleImage { get; set; }

    private string? _fileData;
    [Parameter]
    public string? FileDataValue
    {
        get => _fileData;
        set
        {
            if (_fileData == value) return;
            _fileData = value;
            FileDataValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string?> FileDataValueChanged { get; set; }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        try
        {
            if (e.File.ContentType.Split('/')[0] == "image")
            {
                var buffers = new byte[e.File.Size];

                int maxAllowedSize = 1024 * 1024 * 4;
                await e.File.OpenReadStream(maxAllowedSize).ReadAsync(buffers);

                FileDataValue = Convert.ToBase64String(buffers);
            }
            else
                Snackbar.Add(e.File.Name + " не верный формат", Severity.Warning);


        }
        catch (IOException)
        {
            Snackbar.Add("Превышен максимальный размер файла", Severity.Warning);
        }
        catch (Exception)
        {
            Snackbar.Add("Не удалось загрузить файл", Severity.Warning);
        }
    }
}
