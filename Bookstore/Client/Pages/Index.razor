@page "/"
@using Bookstore.Client.UIHelper
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<PageTitle>Каталог книг в интернет магазине Книжная лавка</PageTitle>

@if (SelectedBooks != null && Catalogs != null)
{
    <div class="pt-2">
        <div class="catalog">
            <CatalogTreeView Title="Категории" Dense="true" SetValueCallback="FilterBooksByCategory" />
        </div>
        <div class="pt-5">
            @if (categoryTitle != null)
            {
                <MudText Style="font-size:36px;font-weight:600;" Class="pt-2">@categoryTitle</MudText>
            }
            <MudGrid>
                @foreach (var book in SelectedBooks)
                {
                    <MudItem lg="3" sm="6" xs="12">
                        <MudPaper Elevation="2" Class="pa-4" Width="100%" Height="100%">
                            <MudLink Href="@($"catalog/book/{book.Id}")">
                                <MudImage Class="rounded mx-auto d-block" Src="@($"data:image/png;base64, {book.FileData}")" Alt="@book.Title" Height="300" Width="192" />
                            </MudLink>
                            <div class="p-3">
                                <MudText Style="font-weight: bold;">@book.Price р.</MudText>
                                <MudLink Class="d-inline-block" Href="@($"catalog/book/{book.Id}")" Color="Color.Default">@book.Title</MudLink>
                                <MudLink Class="d-inline-block" Href="@($"/catalog/author/{book.AuthorId}")" Color="Color.Default" Style="font-size:13px; color: #7d8290; line-height: 24px;">@book.Author.Title</MudLink>
                                <div class="pt-2 pr-3">
                                    <MudButton Link="@(!_user.Identity.IsAuthenticated ? "/Identity/Account/Login" : null)" OnClick="(() => AddBookToCart(book.Id, book.Title))" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">В корзину</MudButton>
                                </div>
                            </div>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </div>
    </div>
}
@code {
    public List<BookModel>? Books { get; set; }
    public List<BookModel>? SelectedBooks { get; set; }
    public List<CatalogModel>? Catalogs { get; set; }
    private HttpClient _http;
    private ClaimsPrincipal _user;


    protected override async Task OnInitializedAsync()
    {
        _user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        if (_user.Identity.IsAuthenticated)
        {
            _http = HttpClientFactory.CreateClient("Bookstore.ServerAPI");

        }
        else
        {
            _http = HttpClientFactory.CreateClient("Bookstore.AnonymousAPI");
        }

        Catalogs = await _http.GetFromJsonAsync<List<CatalogModel>>("api/Catalog/GetAll");
        Books = await _http.GetFromJsonAsync<List<BookModel>>("api/Book/GetAll");
        SelectedBooks = Books;

    }


    private string categoryTitle;
    private void FilterBooksByCategory(TreeItemData treeItemData)
    {
        categoryTitle = treeItemData?.Title ?? null;
        if (treeItemData != null)
        {
            childCatalogId.Clear();
            AddChildCatalog(treeItemData);
            SelectedBooks = Books.Where(t => t.CatalogId == treeItemData.Id || childCatalogId.Contains((int)t.CatalogId)).ToList();
        }
        else
        {
            SelectedBooks = Books;
        }
    }

    private async Task AddBookToCart(int bookId, string? bookTitle)
    {
        if (_user.Identity.IsAuthenticated)
        {
            var userId = _user.Claims.First(t => t.Type == "sub").Value;
            CartModel cartModel = new CartModel() { BookId = bookId, UserId = userId };

            await _http.PostAsJsonAsync("api/Cart/Save", cartModel);

            Snackbar.Configuration.PreventDuplicates = false;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            Snackbar.Add($"Книга {bookTitle} добавлена в корзину", Severity.Info, configure: (configure =>
            {
                configure.Icon = Icons.Filled.Bookmark;
                configure.Onclick = (snackbar) =>
                {
                    NavigationManager.NavigateTo("/personal/cart");
                    return Task.CompletedTask;
                };
            }));
        }
    }

    private List<int> childCatalogId = new List<int>();
    private void AddChildCatalog(TreeItemData treeItemData)
    {
        if (treeItemData.TreeItems == null)
            return;

        foreach (var item in treeItemData.TreeItems)
        {
            childCatalogId.Add(item.Id);
            AddChildCatalog(item);

        }
    }
}