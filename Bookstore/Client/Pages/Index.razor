@page "/"

<PageTitle>Главная страница</PageTitle>

@if (Books != null)
{
    <MudGrid>

        @foreach (var book in (SelectedCatalogId == null ? Books : Books.Where(t => t.CatalogId == SelectedCatalogs.First().Id)))
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <div style="width:250px;">
                    <div style="width: 100%;height: auto;">
                        <div class="product-card__image-holder">
                            <div class="product-card__image-link smartLink">
                                <MudImage Src="@($"images/Book/{book.Filename}")" Alt="@book.Filename" Fluid="true" Elevation="25" Class="rounded-lg ma-4" />
                            </div>
                        </div>
                        <div class="product-card__content">
                            <div class="product-card-price">
                                <MudText Style="font-weight:700;">@book.Price р.</MudText>
                            </div>
                            <div class="product-card__name smartLink">
                                <MudText>@book.Title</MudText>
                            </div>
                            <MudButton FullWidth="false" Variant="Variant.Filled" Color="Color.Secondary">В корзину</MudButton>
                        </div>
                    </div>
                </div>
            </MudItem>
        }
    </MudGrid>
}

@code {
    public List<BookModel>? Books { get; set; }
    public List<CatalogModel>? Catalogs { get; set; }
    public List<CatalogModel>? SelectedCatalogs { get; set; }
    [Inject]
    public IHttpClientFactory? HttpClientFactory { get; set; }


    private int? selectedCatalogId;
    [CascadingParameter]
    public int? SelectedCatalogId
    {
        get => selectedCatalogId;
        set
        {
            selectedCatalogId = value;
            SelectedCatalogs = SelectedCatalogId != null ? Catalogs.Where(t => t.Id == (int)SelectedCatalogId).ToList() : Catalogs; 
        }
    }

    private HttpClient? _http;

    protected override async Task OnInitializedAsync()
    {
        _http = HttpClientFactory.CreateClient("Bookstore.AnonymousAPI");

        Catalogs = await _http.GetFromJsonAsync<List<CatalogModel>>("api/Catalog/GetEntities");
        SelectedCatalogs = Catalogs;
        Books = await _http.GetFromJsonAsync<List<BookModel>>("api/Book/GetEntities");
    }
}