@page "/admin/book/{id:int?}"
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@using Client.UIHelper

@if (Authors != null && PublishingHouses != null)
{
    <BaseGenericForm TEntity="BookModel" Title="Книгу" ControllerName="Book" Id="Id" Context="model" ShowBlockError="true" @ref="bookForm">
        <MudTextField Label="Название книги" Class="mt-3" @bind-Value="model.Title" For="@(() => model.Title)" />

        <UploadImage @bind-FileDataValue="bookForm.Entity.FileData" TitleImage="bookForm.Entity.Title" />

        <MudText>Описание книги</MudText>
        <MarkdownEditor @bind-Value="model.AboutProduct" SpellChecker="false" />

        <MudAutocomplete T="AuthorModel"
                     SearchFunc="@SearchAuthor"
                     ToStringFunc="@(e => e.Title)"
                     ValueChanged="SelectAuthor"
                     Margin="Margin.Dense"
                     Adornment="Adornment.Start"
                     Class="mt-5"
                     SelectValueOnTab="true"
                     Placeholder="Выберите автора"
                     AdornmentIcon="@Icons.Material.Filled.Person" AdornmentColor="Color.Default" Variant="Variant.Outlined" InputMode="InputMode.search" />

        <MudSelect T="int?" Placeholder="Выберите издание" Class="mt-3" AnchorOrigin="Origin.BottomCenter" @bind-Value="model.PublishingHouseId" For="@(() => model.PublishingHouseId)">
            @foreach (var publishingHouse in PublishingHouses)
            {
                <MudSelectItem Value="(int?)publishingHouse.Id">@publishingHouse.Title</MudSelectItem>
            }
        </MudSelect>

        <CatalogTreeView Title="Выберите категорию" SetValueCallback="SetCategoryId" />

        <MudTextField Label="Количество страниц" Class="mt-3" Variant="Variant.Text" Adornment="Adornment.Start" @bind-Value="model.NumberPages" For="@(() => model.NumberPages)" />

        <MudTextField Label="Год издания" Class="mt-3" Variant="Variant.Text" Adornment="Adornment.Start" @bind-Value="model.YearPublication" For="@(() => model.YearPublication)" />

        <MudTextField Label="Цена" Class="mt-3" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" @bind-Value="model.Price" For="@(() => model.Price)" />

    </BaseGenericForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject] private HttpClient HttpClient { get; set; }

    private List<AuthorModel>? Authors { get; set; }
    private List<PublishingHouseModel>? PublishingHouses { get; set; }

    private BaseGenericForm<BookModel>? bookForm;

    protected override async Task OnInitializedAsync()
    {
        Authors = await Http.GetFromJsonAsync<List<AuthorModel>>("api/Author/GetAll");
        PublishingHouses = await Http.GetFromJsonAsync<List<PublishingHouseModel>>("api/PublishingHouse/GetAll");
    }

    private void SetCategoryId(TreeItemData item)
    {
        bookForm.Entity.CatalogId = item != null && item.TreeItems == null ? item.Id : null;
    }

    private async Task<IEnumerable<AuthorModel>> SearchAuthor(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return new List<AuthorModel>();
        var authors = await HttpClient.GetFromJsonAsync<List<AuthorModel>>($"api/Author/GetAllByTitle/{value}");
        return authors;
    }

    private void SelectAuthor(AuthorModel authorModel)
    {
        bookForm.Entity.AuthorId = authorModel.Id;
    }
}